#!/bin/bash

set -x

REPOSITORYURL="https://server.rsmaxwell.co.uk/archiva/repository"
GROUPID="com.rsmaxwell.diary"

currentdir=$(pwd)
result=$?
if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    exit 1
fi


#*****************************************************************
# Clean previously built jars
#*****************************************************************
rm -rf ./target /tmp/latest* /tmp/diary*
result=$?
if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]" 
    echo "result = ${result}"
    exit 1
fi

#*****************************************************************
# Find the latest version of 'wordconverter'
#*****************************************************************
tempdir=$(mktemp -d -t "diary-XXXXXXXXXXXX")
result=$?
if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    exit 1
fi


cd $(tempdir)
result=$?
if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    exit 1
fi


groupId="com.rsmaxwell.diary"
wordconverter_artifactId="wordconverter"

cat << EOT > pom.xml
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>junk</groupId>
	<artifactId>junk</artifactId>
	<version>junk</version>

	<dependencies>
		<dependency>
			<groupId>${groupId}</groupId>
			<artifactId>${wordconverter_artifactId}</artifactId>
			<version>0.0.0</version>
		</dependency>
	</dependencies>

	<repositories>
		<repository>
			<id>internal</id>
			<url>https://server.rsmaxwell.co.uk/archiva/repository/releases</url>
			<releases>
				<updatePolicy>always</updatePolicy>
			</releases>
		</repository>
	</repositories>

</project>
EOT

mvn --batch-mode --log-file output.txt versions:use-latest-releases
result=$?
if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "----[ output.txt ]--------------------------"
    cat output.txt
    echo "----------------------------------------"
    exit 1
fi

while [ ! -f pom.xml ]; do sleep 1; done

echo "---[ pom.xml ]---------------------------------"
cat -n pom.xml
echo "-----------------------------------------------"

line=$(grep "<version>" pom.xml | head -n 2 | tail -n 1)
if [ ${#line} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    exit 1
fi

regex="<version>(.*)</version>"
if [[ ! ${line} =~ ${regex} ]]; then
    echo "Error: $0[${LINENO}]"
    exit 1
fi

wordconverter_version="${BASH_REMATCH[1]}"
echo "wordconverter_version: ${wordconverter_version}"

cd ${currentdir}
result=$?
if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    exit 1
fi

rm -rf ${tempdir}
result=$?
if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    exit 1
fi

#*****************************************************************
# Replace tags in the source for the Version class
#*****************************************************************
VERSION="0.0.$((${BUILD_ID}))"
TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
    
find . -name "Version.java" | while read versionfile; do

    echo "Replacing tags in ${versionfile}"

    sed -i "s@<VERSION>@${VERSION}@g"            ${versionfile}    
    sed -i "s@<BUILD_ID>@${BUILD_ID}@g"          ${versionfile}
    sed -i "s@<BUILD_DATE>@${TIMESTAMP}@g"       ${versionfile}
    sed -i "s@<GIT_COMMIT>@${GIT_COMMIT}@g"      ${versionfile}
    sed -i "s@<GIT_BRANCH>@${GIT_BRANCH}@g"      ${versionfile}
    sed -i "s@<GIT_URL>@${GIT_URL}@g"            ${versionfile}
done

#*****************************************************************
# Update the version in the pom file
#*****************************************************************
mvn --batch-mode --log-file output.txt versions:set -DnewVersion=${VERSION}
result=$?
if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "----[ output.txt ]--------------------------"
    cat output.txt
    echo "----------------------------------------"
    exit 1
fi

#*****************************************************************
# Update the dependency versions in the pom file
#*****************************************************************
mvn --batch-mode --log-file output.txt versions:use-dep-version -DdepVersion=${wordconverter_version} -Dincludes=com.rsmaxwell.diary:wordconverter
result=$?
if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "----[ output.txt ]--------------------------"
    cat output.txt
    echo "----------------------------------------"
    exit 1
fi
